#!/bin/bash
# -*- coding: utf-8 -*-

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Avito Rental Bot –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
   clear
   echo -e "${CYAN}${BOLD}"
   echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
   echo "‚ïë                    AVITO RENTAL BOT PRODUCTION READINESS                     ‚ïë"
   echo "‚ïë                        Comprehensive Pre-Production Check                    ‚ïë"
   echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
   echo "‚ïë  üè† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –±–æ–µ–≤–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é                       ‚ïë"
   echo "‚ïë  üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤                                 ‚ïë"
   echo "‚ïë  ‚ö° –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π                                     ‚ïë"
   echo "‚ïë  üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏                               ‚ïë"
   echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
   echo -e "${NC}"
   echo
}

print_step() {
   echo -e "${BLUE}[–≠–¢–ê–ü]${NC} $1"
}

print_success() {
   echo -e "${GREEN}[‚úì]${NC} $1"
}

print_error() {
   echo -e "${RED}[‚úó]${NC} $1"
}

print_warning() {
   echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_info() {
   echo -e "${CYAN}[INFO]${NC} $1"
}

print_separator() {
   echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNINGS=0
CRITICAL_ERRORS=()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
add_check() {
   TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
   if [ "$1" == "pass" ]; then
       PASSED_CHECKS=$((PASSED_CHECKS + 1))
       print_success "$2"
   elif [ "$1" == "fail" ]; then
       FAILED_CHECKS=$((FAILED_CHECKS + 1))
       print_error "$2"
       if [ "$3" == "critical" ]; then
           CRITICAL_ERRORS+=("$2")
       fi
   elif [ "$1" == "warning" ]; then
       WARNINGS=$((WARNINGS + 1))
       print_warning "$2"
   fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
   if command -v python3 &> /dev/null; then
       PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
       add_check "pass" "Python 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è $PYTHON_VERSION)"
   else
       add_check "fail" "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω" "critical"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
   if command -v pip3 &> /dev/null; then
       add_check "pass" "pip3 –¥–æ—Å—Ç—É–ø–µ–Ω"
   else
       add_check "fail" "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω" "critical"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ git
   if command -v git &> /dev/null; then
       add_check "pass" "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
   else
       add_check "warning" "Git –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ curl
   if command -v curl &> /dev/null; then
       add_check "pass" "curl –¥–æ—Å—Ç—É–ø–µ–Ω"
   else
       add_check "warning" "curl –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤)"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemctl (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
   if command -v systemctl &> /dev/null; then
       add_check "pass" "systemctl –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º)"
   else
       add_check "warning" "systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)"
   fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
check_project_files() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
   
   # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   REQUIRED_FILES=(
       "main.py:–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞"
       "config.py:–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
       "avito.py:Avito API –∫–ª–∏–µ–Ω—Ç"
       "chat_gpt.py:OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
       "telegram.py:Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
       "deploy.sh:–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
   )
   
   for file_info in "${REQUIRED_FILES[@]}"; do
       IFS=':' read -r filename description <<< "$file_info"
       if [ -f "$filename" ]; then
           add_check "pass" "$description ($filename) –Ω–∞–π–¥–µ–Ω"
       else
           add_check "fail" "$description ($filename) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" "critical"
       fi
   done
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ deploy.sh
   if [ -f "deploy.sh" ]; then
       if [ -x "deploy.sh" ]; then
           add_check "pass" "deploy.sh –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
       else
           add_check "warning" "deploy.sh –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–∑–∞–ø—É—Å—Ç–∏—Ç–µ: chmod +x deploy.sh)"
       fi
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
   TEST_FILES=("test_system.py" "quick_config_check.py" "test_scenarios.py")
   for test_file in "${TEST_FILES[@]}"; do
       if [ -f "$test_file" ]; then
           add_check "pass" "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª $test_file –Ω–∞–π–¥–µ–Ω"
       else
           add_check "warning" "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª $test_file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
       fi
   done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤
check_python_syntax() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"
   
   PYTHON_FILES=("main.py" "config.py" "avito.py" "chat_gpt.py" "telegram.py")
   
   for file in "${PYTHON_FILES[@]}"; do
       if [ -f "$file" ]; then
           if python3 -m py_compile "$file" 2>/dev/null; then
               add_check "pass" "–°–∏–Ω—Ç–∞–∫—Å–∏—Å $file –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
           else
               add_check "fail" "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ $file" "critical"
           fi
       fi
   done
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
   if [ -f "test_system.py" ]; then
       if python3 -m py_compile "test_system.py" 2>/dev/null; then
           add_check "pass" "–°–∏–Ω—Ç–∞–∫—Å–∏—Å test_system.py –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
       else
           add_check "warning" "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ test_system.py"
       fi
   fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_python_dependencies() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
   
   # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
   REQUIRED_MODULES=("aiohttp" "asyncio" "json" "datetime")
   
   for module in "${REQUIRED_MODULES[@]}"; do
       if python3 -c "import $module" 2>/dev/null; then
           add_check "pass" "–ú–æ–¥—É–ª—å $module –¥–æ—Å—Ç—É–ø–µ–Ω"
       else
           if [ "$module" == "aiohttp" ]; then
               add_check "fail" "–ú–æ–¥—É–ª—å $module –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)" "critical"
           else
               add_check "warning" "–ú–æ–¥—É–ª—å $module –Ω–µ –Ω–∞–π–¥–µ–Ω"
           fi
       fi
   done
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ aiohttp
   if python3 -c "import aiohttp; print(aiohttp.__version__)" 2>/dev/null; then
       AIOHTTP_VERSION=$(python3 -c "import aiohttp; print(aiohttp.__version__)" 2>/dev/null)
       add_check "pass" "aiohttp –≤–µ—Ä—Å–∏—è $AIOHTTP_VERSION"
   fi
}

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
run_quick_config_check() {
   print_separator
   print_step "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
   
   if [ -f "quick_config_check.py" ]; then
       print_info "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
       
       if python3 quick_config_check.py; then
           add_check "pass" "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞"
       else
           EXIT_CODE=$?
           if [ $EXIT_CODE -eq 1 ]; then
               add_check "fail" "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" "critical"
           else
               add_check "warning" "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
           fi
       fi
   else
       add_check "warning" "quick_config_check.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
   fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
check_internet_connectivity() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ API"
   
   # –°–ø–∏—Å–æ–∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   APIS=(
       "api.openai.com:OpenAI API"
       "api.avito.ru:Avito API"
       "api.telegram.org:Telegram API"
       "google.com:–û–±—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
   )
   
   for api_info in "${APIS[@]}"; do
       IFS=':' read -r hostname description <<< "$api_info"
       
       if ping -c 1 -W 5 "$hostname" &> /dev/null; then
           add_check "pass" "$description ($hostname) –¥–æ—Å—Ç—É–ø–µ–Ω"
       else
           if [ "$hostname" == "google.com" ]; then
               add_check "fail" "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É" "critical"
           else
               add_check "warning" "$description ($hostname) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
           fi
       fi
   done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_system_resources() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
   DISK_USAGE=$(df -h . | awk 'NR==2 {print $5}' | sed 's/%//')
   if [ "$DISK_USAGE" -lt 90 ]; then
       add_check "pass" "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%"
   elif [ "$DISK_USAGE" -lt 95 ]; then
       add_check "warning" "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%"
   else
       add_check "fail" "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%" "critical"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
   if command -v free &> /dev/null; then
       TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2/1024}')
       if [ "$TOTAL_RAM" -ge 1 ]; then
           add_check "pass" "RAM: ${TOTAL_RAM}GB –¥–æ—Å—Ç—É–ø–Ω–æ"
       else
           add_check "warning" "–ú–∞–ª–æ RAM: ${TOTAL_RAM}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1GB)"
       fi
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ load average
   if command -v uptime &> /dev/null; then
       LOAD_AVG=$(uptime | awk '{print $10}' | sed 's/,//')
       add_check "pass" "Load average: $LOAD_AVG"
   fi
}

# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
run_full_testing() {
   print_separator
   print_step "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
   
   if [ -f "test_system.py" ]; then
       print_info "–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
       
       # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
       TEST_LOG=$(mktemp)
       
       if timeout 300 python3 test_system.py > "$TEST_LOG" 2>&1; then
           add_check "pass" "–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
           
           # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–≥–∞
           if grep -q "–ü—Ä–æ–π–¥–µ–Ω–æ:" "$TEST_LOG"; then
               PASSED_TESTS=$(grep "–ü—Ä–æ–π–¥–µ–Ω–æ:" "$TEST_LOG" | awk '{print $2}')
               FAILED_TESTS=$(grep "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ:" "$TEST_LOG" | awk '{print $3}')
               print_info "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $PASSED_TESTS –ø—Ä–æ–π–¥–µ–Ω–æ, $FAILED_TESTS –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
           fi
       else
           EXIT_CODE=$?
           if [ $EXIT_CODE -eq 124 ]; then
               add_check "fail" "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)" "critical"
           else
               add_check "fail" "–û—à–∏–±–∫–∏ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏" "critical"
           fi
           
           # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
           if [ -f "$TEST_LOG" ]; then
               print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
               tail -10 "$TEST_LOG"
           fi
       fi
       
       # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
       rm -f "$TEST_LOG"
   else
       add_check "warning" "test_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
   fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check_security() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ config.py
   if [ -f "config.py" ]; then
       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
       if grep -q "–í–ê–®_–ê–ü–ò_–ö–õ–Æ–ß\|–ö–õ–ò–ï–ù–¢_–ê–ô–î–ò\|–°–ò–ö–†–ï–¢_–ö–ï–ô\|–¢–û–ö–ï–ù_–ë–û–¢–ê" "config.py"; then
           add_check "fail" "–í config.py –æ—Å—Ç–∞–ª–∏—Å—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π" "critical"
       else
           add_check "pass" "–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ config.py –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
       fi
       
       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
       CONFIG_PERMS=$(stat -c "%a" config.py 2>/dev/null || stat -f "%A" config.py 2>/dev/null)
       if [ "$CONFIG_PERMS" == "600" ] || [ "$CONFIG_PERMS" == "644" ]; then
           add_check "pass" "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ config.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ($CONFIG_PERMS)"
       else
           add_check "warning" "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ config.py (chmod 600 config.py)"
       fi
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ debug —Ä–µ–∂–∏–º—ã
   DEBUG_PATTERNS=("DEBUG.*=.*True" "debug.*=.*true" "LOGGING_LEVEL.*=.*DEBUG")
   for pattern in "${DEBUG_PATTERNS[@]}"; do
       if grep -rq "$pattern" . --include="*.py"; then
           add_check "warning" "–ù–∞–π–¥–µ–Ω debug —Ä–µ–∂–∏–º –≤ –∫–æ–¥–µ (–æ—Ç–∫–ª—é—á–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"
       fi
   done
   
   add_check "pass" "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
check_deployment_readiness() {
   print_separator
   print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ root –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   if [ "$EUID" -eq 0 ]; then
       add_check "pass" "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)"
   else
       add_check "warning" "–î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root (sudo)"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd
   if systemctl --version &> /dev/null; then
       add_check "pass" "systemd –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º"
   else
       add_check "warning" "systemd –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—É—Å–∫–∞)"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
   if [ -d "/var/log" ] && [ -w "/var/log" ]; then
       add_check "pass" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /var/log –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏"
   else
       add_check "warning" "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ /var/log"
   fi
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
   if pgrep -f "main.py" > /dev/null; then
       add_check "warning" "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å main.py (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º)"
   else
       add_check "pass" "–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
   fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_final_report() {
   print_separator
   print_step "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
   
   # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
   if [ $TOTAL_CHECKS -gt 0 ]; then
       SUCCESS_RATE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
   else
       SUCCESS_RATE=0
   fi
   
   # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   REPORT_FILE="production_readiness_report_$(date +%Y%m%d_%H%M%S).txt"
   
   cat > "$REPORT_FILE" << EOF
AVITO RENTAL BOT - –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£
==================================================

–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $(date)
–û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${SUCCESS_RATE}%

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS
- –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED_CHECKS
- –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: $FAILED_CHECKS  
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNINGS

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:
EOF

   if [ ${#CRITICAL_ERRORS[@]} -eq 0 ]; then
       echo "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã" >> "$REPORT_FILE"
   else
       for error in "${CRITICAL_ERRORS[@]}"; do
           echo "- $error" >> "$REPORT_FILE"
       done
   fi
   
   cat >> "$REPORT_FILE" << EOF

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã
5. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º

–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
EOF

   if [ ${#CRITICAL_ERRORS[@]} -eq 0 ] && [ $SUCCESS_RATE -ge 90 ]; then
       cat >> "$REPORT_FILE" << EOF
‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!
- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: sudo ./deploy.sh
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ smoke —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
EOF
   elif [ ${#CRITICAL_ERRORS[@]} -eq 0 ] && [ $SUCCESS_RATE -ge 75 ]; then
       cat >> "$REPORT_FILE" << EOF
‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£
- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
EOF
   else
       cat >> "$REPORT_FILE" << EOF
‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£
- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
- –ù–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ –¥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
EOF
   fi

   print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $REPORT_FILE"
}

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
print_final_summary() {
   print_separator
   echo -e "${BOLD}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
   echo -e "${BOLD}${WHITE}‚ïë                              –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢                               ‚ïë${NC}"
   echo -e "${BOLD}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
   
   # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
   if [ $TOTAL_CHECKS -gt 0 ]; then
       SUCCESS_RATE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
   else
       SUCCESS_RATE=0
   fi
   
   echo
   echo -e "${BOLD}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC}"
   echo -e "${GREEN}‚úì –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED_CHECKS${NC}"
   echo -e "${RED}‚úó –û—à–∏–±–∫–∏: $FAILED_CHECKS${NC}"
   echo -e "${YELLOW}‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNINGS${NC}"
   echo -e "${CYAN}üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS${NC}"
   echo
   echo -e "${BOLD}–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: $SUCCESS_RATE%${NC}"
   
   # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
   if [ ${#CRITICAL_ERRORS[@]} -eq 0 ] && [ $SUCCESS_RATE -ge 90 ]; then
       echo
       echo -e "${GREEN}${BOLD}üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£! üéâ${NC}"
       echo -e "${GREEN}–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é${NC}"
       echo
       echo -e "${CYAN}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
       echo -e "${WHITE}1. sudo ./deploy.sh                 ${CYAN}# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ${NC}"
       echo -e "${WHITE}2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞            ${CYAN}# –õ–æ–≥–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏${NC}"
       echo -e "${WHITE}3. Smoke —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ               ${CYAN}# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è${NC}"
       FINAL_EXIT_CODE=0
       
   elif [ ${#CRITICAL_ERRORS[@]} -eq 0 ] && [ $SUCCESS_RATE -ge 75 ]; then
       echo
       echo -e "${YELLOW}${BOLD}‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£ ‚ö†Ô∏è${NC}"
       echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è${NC}"
       echo
       echo -e "${CYAN}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
       echo -e "${WHITE}1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è    ${CYAN}# –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏${NC}"
       echo -e "${WHITE}2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ${NC}"
       echo -e "${WHITE}3. –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ${NC}"
       FINAL_EXIT_CODE=0
       
   else
       echo
       echo -e "${RED}${BOLD}‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£ ‚ùå${NC}"
       echo -e "${RED}–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã${NC}"
       echo
       if [ ${#CRITICAL_ERRORS[@]} -gt 0 ]; then
           echo -e "${RED}${BOLD}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:${NC}"
           for error in "${CRITICAL_ERRORS[@]}"; do
               echo -e "${RED}  ‚úó $error${NC}"
           done
       fi
       echo
       echo -e "${CYAN}–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}"
       echo -e "${WHITE}1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏${NC}"
       echo -e "${WHITE}2. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏${NC}"
       echo -e "${WHITE}3. –ù–ï —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ –¥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º${NC}"
       FINAL_EXIT_CODE=1
   fi
   
   echo
   print_separator
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
   print_header
   
   print_info "–ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É..."
   print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
   echo
   
   # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
   check_environment
   check_project_files
   check_python_syntax
   check_python_dependencies
   run_quick_config_check
   check_internet_connectivity
   check_system_resources
   run_full_testing
   check_security
   check_deployment_readiness
   
   # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
   generate_final_report
   print_final_summary
   
   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   echo -e "${CYAN}–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
   echo -e "${WHITE}üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:${NC} production_readiness_report_*.txt"
   echo -e "${WHITE}üîß –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC} test_report_*.txt (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å)"
   echo -e "${WHITE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ README –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ"
   echo -e "${WHITE}üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:${NC} –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API —Å–µ—Ä–≤–∏—Å–æ–≤"
   echo
   
   exit $FINAL_EXIT_CODE
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${RED}–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 1' INT TERM

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
   case $1 in
       -h|--help)
           echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
           echo
           echo "–û–ø—Ü–∏–∏:"
           echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
           echo "  --quick        –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
           echo "  --verbose      –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
           echo
           echo "–ü—Ä–∏–º–µ—Ä—ã:"
           echo "  $0                    # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
           echo "  $0 --quick           # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
           echo "  sudo $0              # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–∞–≤–∞–º–∏ root"
           echo
           exit 0
           ;;
       --quick)
           QUICK_MODE=true
           shift
           ;;
       --verbose)
           VERBOSE=true
           shift
           ;;
       *)
           echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
           echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
           exit 1
           ;;
   esac
done

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
if [ "$QUICK_MODE" = true ]; then
   print_info "–†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)"
   run_full_testing() {
       print_separator
       print_step "–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ)"
       add_check "warning" "–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ --quick –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)"
   }
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"