import asyncio
import aiohttp
import json
from config import EXTRACTION_PROMPT_TEMPLATE

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

async def get_address_from_coords(session, lat, lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ Nominatim API"""
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=18&addressdetails=1"
        headers = {"User-Agent": "AvitoBot/1.0"}
        
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                address_parts = data.get("address", {})
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                address_components = []
                for key in ["road", "house_number", "suburb", "city", "town", "village"]:
                    if address_parts.get(key):
                        address_components.append(address_parts[key])
                
                return ", ".join(address_components) if address_components else data.get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}"
    return "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
    
    async def send_message(self, chat_id, text, parse_mode="Markdown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
        url = f"{self.base_url}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    return True
                else:
                    error_text = await response.text()
                    print(f"Telegram API error: {response.status} ‚Äî {error_text}")
                    return False
    
    async def send_client_info(self, client_data, chat_id, item_data=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
        try:
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
            if isinstance(client_data, str):
                data = json.loads(client_data)
            else:
                data = client_data
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üè† –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ê–†–ï–ù–î–£\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
            if item_data:
                item_title = item_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                message += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: {item_title}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                location_data = item_data.get("location", {})
                if location_data:
                    city = location_data.get("title", "–ù–µ —É–∫–∞–∑–∞–Ω")
                    lat = location_data.get("lat")
                    lon = location_data.get("lon")
                    
                    if lat and lon:
                        async with aiohttp.ClientSession() as session:
                            address = await get_address_from_coords(session, lat, lon)
                            message += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                    else:
                        message += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
                else:
                    message += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
                
                message += "\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            if data.get('name'):
                message += f"üë§ –ò–º—è: {data['name']}\n"
            
            if data.get('phone'):
                message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å—Ü–∞—Ö
            if data.get('residents_info'):
                message += f"üë• –ñ–∏–ª—å—Ü—ã: {data['residents_info']}\n"
            
            if data.get('residents_count'):
                message += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö: {data['residents_count']}\n"
            
            # –î–µ—Ç–∏
            if data.get('has_children'):
                children_info = data.get('children_details', '–ï—Å—Ç—å –¥–µ—Ç–∏')
                message += f"üë∂ –î–µ—Ç–∏: {children_info}\n"
            else:
                message += f"üë∂ –î–µ—Ç–∏: –ù–µ—Ç\n"
            
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            if data.get('has_pets'):
                pets_info = data.get('pets_details', '–ï—Å—Ç—å –∂–∏–≤–æ—Ç–Ω—ã–µ')
                message += f"üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ: {pets_info}\n"
            else:
                message += f"üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ: –ù–µ—Ç\n"
            
            # –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∏ –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
            if data.get('rental_period'):
                message += f"üìÖ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {data['rental_period']}\n"
            
            if data.get('move_in_deadline'):
                message += f"üóìÔ∏è –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {data['move_in_deadline']}\n"
            
            message += f"\n‚úÖ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏—Ü–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self.send_message(chat_id, message)
            if success:
                print("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram")
            else:
                print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram")
            
            return success
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
telegram_bot = TelegramBot(TELEGRAM_BOT_TOKEN)

async def send_completed_application(client_data, item_data=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    return await telegram_bot.send_client_info(client_data, TELEGRAM_CHAT_ID, item_data)