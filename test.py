#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Avito Rental Bot —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ë–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ê–≤–∏—Ç–æ (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)
"""

import asyncio
import json
from datetime import datetime, timezone, timedelta
import sys
import os

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config import (
    AVITO_USER_ID, AVITO_CLIENT_ID, AVITO_CLIENT_SECRET,
    TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID,
    FOLLOWUP_MESSAGES, FOLLOWUP_INTERVALS,
    WORK_HOUR_START, WORK_HOUR_END
)
from avito import AvitoClient
from chat_gpt import get_agent_response, extract_final_client_data, check_dialog_completion
from telegram import send_completed_application


class TestAvitoBot:
    def __init__(self):
        self.test_mode = True
        print("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –æ—Ç–≤–µ—Ç—ã –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –ê–≤–∏—Ç–æ")
        print("=" * 60)
    
    def get_moscow_time(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö"""
        moscow_tz = timezone(timedelta(hours=3))
        return datetime.now(moscow_tz)
    
    def is_work_time(self, dt=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if dt is None:
            dt = self.get_moscow_time()
        hour_minute = dt.hour + dt.minute / 60.0
        return WORK_HOUR_START <= hour_minute <= WORK_HOUR_END
    
    def calculate_next_followup_time(self, base_time, interval_seconds):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ follow-up —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        moscow_tz = timezone(timedelta(hours=3))
        target_time = datetime.fromtimestamp(base_time + interval_seconds, moscow_tz)
        
        if self.is_work_time(target_time):
            return target_time.timestamp()
        
        if target_time.hour < WORK_HOUR_START:
            target_time = target_time.replace(hour=9, minute=30, second=0, microsecond=0)
        else:
            target_time = target_time.replace(hour=9, minute=30, second=0, microsecond=0) + timedelta(days=1)
        
        return target_time.timestamp()
    
    async def test_real_avito_connection(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Avito API"""
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Avito API...")
        
        try:
            async with AvitoClient(AVITO_USER_ID, AVITO_CLIENT_ID, AVITO_CLIENT_SECRET) as client:
                chats = await client.get_chats(limit=5)
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
                
                if chats:
                    chat = chats[0]
                    chat_id = chat.get("id")
                    print(f"üìÇ –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {chat_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
                    messages = await client.get_messages(chat_id, limit=10)
                    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(messages)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    if messages:
                        print("\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                        for i, msg in enumerate(messages[-3:], 1):
                            direction = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg.get("direction") == "in" else "ü§ñ –ê–≥–µ–Ω—Ç"
                            text = msg.get("content", {}).get("text", "")[:100]
                            print(f"  {i}. {direction}: {text}")
                    
                    return chat, messages
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return None, []
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Avito: {e}")
            return None, []
    
    async def test_chatgpt_responses(self, messages=None):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ ChatGPT"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ ChatGPT...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        test_dialogs = [
            {
                "name": "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "dialog": "–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞",
                "is_first": True
            },
            {
                "name": "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤",
                "dialog": """–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞
–°–≤–µ—Ç–ª–∞–Ω–∞: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
–ö–ª–∏–µ–Ω—Ç: –ë—É–¥—É –∂–∏—Ç—å —Å –¥–µ–≤—É—à–∫–æ–π""",
                "is_first": False
            },
            {
                "name": "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥",
                "dialog": """–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞
–°–≤–µ—Ç–ª–∞–Ω–∞: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
–ö–ª–∏–µ–Ω—Ç: –ë—É–¥—É –∂–∏—Ç—å –æ–¥–∏–Ω, –º–Ω–µ 28 –ª–µ—Ç
–°–≤–µ—Ç–ª–∞–Ω–∞: –°–ø–∞—Å–∏–±–æ! –î–µ—Ç–∏ –±—É–¥—É—Ç?
–ö–ª–∏–µ–Ω—Ç: –ù–µ—Ç
–°–≤–µ—Ç–ª–∞–Ω–∞: –ñ–∏–≤–æ—Ç–Ω—ã–µ –µ—Å—Ç—å?
–ö–ª–∏–µ–Ω—Ç: –î–∞, –∫–æ—Ç
–°–≤–µ—Ç–ª–∞–Ω–∞: –ü–æ–Ω—è—Ç–Ω–æ! –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–Ω–∏–º–∞—Ç—å?
–ö–ª–∏–µ–Ω—Ç: –•–æ—Ç—è –±—ã –Ω–∞ –≥–æ–¥
–°–≤–µ—Ç–ª–∞–Ω–∞: –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è?
–ö–ª–∏–µ–Ω—Ç: –î–æ 20 –∞–≤–≥—É—Å—Ç–∞
–°–≤–µ—Ç–ª–∞–Ω–∞: –ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?
–ö–ª–∏–µ–Ω—Ç: –ú–∞–∫—Å–∏–º
–°–≤–µ—Ç–ª–∞–Ω–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏?
–ö–ª–∏–µ–Ω—Ç: +79161234567""",
                "is_first": False
            }
        ]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if messages:
            real_dialog = self.format_messages_for_gpt(messages)
            test_dialogs.insert(0, {
                "name": "–†–µ–∞–ª—å–Ω—ã–π —á–∞—Ç",
                "dialog": real_dialog,
                "is_first": len([m for m in messages if m.get("direction") == "out"]) == 0
            })
        
        for test in test_dialogs:
            print(f"\nüìù –¢–µ—Å—Ç: {test['name']}")
            print(f"üìÑ –î–∏–∞–ª–æ–≥:\n{test['dialog']}")
            
            response = await get_agent_response(test['dialog'], test['is_first'])
            
            print(f"ü§ñ –û—Ç–≤–µ—Ç GPT: {response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
            is_complete = check_dialog_completion(response)
            print(f"üéØ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if is_complete else '–ù–µ—Ç'}")
            
            if is_complete:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                client_data = await extract_final_client_data(test['dialog'])
                if client_data:
                    print("üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    print(json.dumps(client_data, ensure_ascii=False, indent=2))
            
            print("-" * 40)
    
    def format_messages_for_gpt(self, messages):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT"""
        dialog = []
        sorted_messages = sorted(messages, key=lambda x: x.get("created", 0))
        
        for message in sorted_messages:
            if message.get("type") != "text":
                continue
            
            direction = message.get("direction")
            text = message.get("content", {}).get("text", "").strip()
            
            if not text or message.get("author_id", 0) == 0:
                continue
            
            if direction == "in":
                dialog.append(f"–ö–ª–∏–µ–Ω—Ç: {text}")
            elif direction == "out":
                clean_text = text
                if clean_text.startswith("–°–≤–µ—Ç–ª–∞–Ω–∞: "):
                    clean_text = clean_text[10:].strip()
                dialog.append(f"–°–≤–µ—Ç–ª–∞–Ω–∞: {clean_text}")
        
        return "\n".join(dialog)
    
    async def test_followup_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã follow-up —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã follow-up...")
        
        current_time = self.get_moscow_time()
        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üè¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if self.is_work_time() else '–ù–µ—Ç'}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        last_activity = current_time.timestamp() - 2 * 3600
        
        print(f"\nüìÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã follow-up –æ—Ç –≤—Ä–µ–º–µ–Ω–∏: {datetime.fromtimestamp(last_activity, timezone(timedelta(hours=3))).strftime('%H:%M')}")
        
        for stage, interval in FOLLOWUP_INTERVALS.items():
            next_time = self.calculate_next_followup_time(last_activity, interval)
            next_dt = datetime.fromtimestamp(next_time, timezone(timedelta(hours=3)))
            
            message = FOLLOWUP_MESSAGES[stage]
            print(f"üì§ {stage}: {next_dt.strftime('%d.%m %H:%M')} - {message}")
        
        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–µ–µ –∏ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        print(f"\nüïò –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        
        test_times = [
            ("08:00", "–î–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"),
            ("12:00", "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"),
            ("22:00", "–ü–æ—Å–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"),
            ("02:00", "–ù–æ—á—å")
        ]
        
        for time_str, description in test_times:
            test_hour, test_minute = map(int, time_str.split(':'))
            test_dt = current_time.replace(hour=test_hour, minute=test_minute)
            
            is_work = self.is_work_time(test_dt)
            print(f"  {time_str} ({description}): {'‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º' if is_work else '‚è∞ –ü–µ—Ä–µ–Ω–æ—Å–∏–º'}")
    
    async def test_telegram_sending(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        test_client_data = {
            "name": "–ú–∞–∫—Å–∏–º",
            "phone": "+79161234567",
            "residents_info": "–º—É–∂—á–∏–Ω–∞ 28 –ª–µ—Ç",
            "residents_count": 1,
            "residents_details": "–º—É–∂—á–∏–Ω–∞ 28 –ª–µ—Ç",
            "has_children": False,
            "children_details": None,
            "has_pets": True,
            "pets_details": "–∫–æ—Ç",
            "rental_period": "–æ—Ç 12 –º–µ—Å—è—Ü–µ–≤",
            "move_in_deadline": "–¥–æ 20 –∞–≤–≥—É—Å—Ç–∞"
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        test_item_data = {
            "title": "2-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞, 45 –º¬≤, 5/9 —ç—Ç.",
            "location": {
                "title": "–ú–æ—Å–∫–≤–∞",
                "lat": 55.7558,
                "lon": 37.6176
            }
        }
        
        print("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:")
        print(json.dumps(test_client_data, ensure_ascii=False, indent=2))
        
        try:
            success = await send_completed_application(test_client_data, test_item_data)
            
            if success:
                print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
    
    async def test_full_integration(self):
        """–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
        print("\nüéØ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
        print("=" * 60)
        
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Avito
        chat_data, messages = await self.test_real_avito_connection()
        
        # 2. –¢–µ—Å—Ç ChatGPT
        await self.test_chatgpt_responses(messages)
        
        # 3. –¢–µ—Å—Ç follow-up —Å–∏—Å—Ç–µ–º—ã
        await self.test_followup_system()
        
        # 4. –¢–µ—Å—Ç Telegram
        await self.test_telegram_sending()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(f"  Avito User ID: {AVITO_USER_ID}")
        print(f"  Avito Client ID: {AVITO_CLIENT_ID[:10]}...")
        print(f"  Telegram Bot Token: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if TELEGRAM_BOT_TOKEN != '–¢–û–ö–ï–ù_–ë–û–¢–ê' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"  Telegram Chat ID: {TELEGRAM_CHAT_ID}")


async def main():
    print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AVITO RENTAL BOT")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.py
    if not os.path.exists('config.py'):
        print("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if AVITO_USER_ID == 000000000:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω AVITO_USER_ID –≤ config.py")
    
    if TELEGRAM_BOT_TOKEN == "–¢–û–ö–ï–ù_–ë–û–¢–ê":
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_BOT_TOKEN –≤ config.py")
    
    bot_tester = TestAvitoBot()
    
    try:
        await bot_tester.test_full_integration()
        
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())